#!/usr/bin/python

# =============================================================================
#
#    Remuco - A remote control system for media players.
#    Copyright (C) 2006-2009 by the Remuco team, see AUTHORS.
#
#    This file is part of Remuco.
#
#    Remuco is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Remuco is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Remuco.  If not, see <http://www.gnu.org/licenses/>.
#
# =============================================================================

"""Winamp adapter for Remuco, implemented as an executable script.

TODO:
 - ctrl_*() should only re-poll the values that have changed
 - run as a Winamp in-process plugin and get asynchronous notification of player
   state changes (IPC_CB_MISC)
"""

import os.path
import remuco
from remuco import log
import winamp

IA_JUMP = remuco.ItemAction("Jump to")
IA_REMOVE = remuco.ItemAction("Remove", multiple=True)
PLAYLIST_ACTIONS = (IA_JUMP, IA_REMOVE)

FA_APPEND = remuco.ItemAction("Append")
FA_PLAY = remuco.ItemAction("Play")
FILE_ACTIONS = (FA_APPEND, FA_PLAY)

class WinampAdapter(remuco.PlayerAdapter):
    def __init__(self):
        super(WinampAdapter, self).__init__(
            "Winamp",
            playback_known=True,
            volume_known=True,
            file_actions=FILE_ACTIONS,
            mime_types=["audio"]
        )

    def start(self):
        super(WinampAdapter, self).start()
        self.winamp = winamp.Winamp()

    def stop(self):
        self.winamp.detach()
        super(WinampAdapter, self).stop()

    def poll(self):
        w2r_status = {
            winamp.PLAYBACK_NOT_PLAYING: remuco.PLAYBACK_STOP,
            winamp.PLAYBACK_PLAYING: remuco.PLAYBACK_PLAY,
            winamp.PLAYBACK_PAUSE: remuco.PLAYBACK_PAUSE
        }
        self.update_playback(w2r_status[self.winamp.getPlaybackStatus()])
        self.update_repeat(self.winamp.getRepeat())
        self.update_shuffle(self.winamp.getShuffle())
        
        id = self.winamp.getPlaylistPosition()
        filename = self.winamp.getPlaylistFile(id)
        info = {
            remuco.INFO_ARTIST: self.winamp.getExtendedFileInfo(filename, "artist"),
            remuco.INFO_ALBUM: self.winamp.getExtendedFileInfo(filename, "album"),
            remuco.INFO_TITLE: self.winamp.getExtendedFileInfo(filename, "title"),
            remuco.INFO_GENRE: self.winamp.getExtendedFileInfo(filename, "genre"),
            remuco.INFO_YEAR: self.winamp.getExtendedFileInfo(filename, "year"),
            remuco.INFO_BITRATE: self.winamp.getCurrentPlayingInfo(winamp.INFO_BITRATE),
            remuco.INFO_RATING: self.winamp.getRating(),
            remuco.INFO_LENGTH: self.winamp.getPlayingTrackLength(),
        }
        if not info[remuco.INFO_TITLE]:
          info[remuco.INFO_TITLE] = os.path.basename(
            self.winamp.getPlaylistFile(id)
          )
        self.update_item(id, info, None)
        
        self.update_position(id)
        
        self.update_progress(self.winamp.getPlayingTrackPosition() / 1000,
            self.winamp.getPlayingTrackLength())

        self.update_volume(self.winamp.getVolume() * 100 / 255)

    def ctrl_toggle_playing(self):
        status = self.winamp.getPlaybackStatus()
        if status == winamp.PLAYBACK_NOT_PLAYING:
            self.winamp.play()
        elif status in (winamp.PLAYBACK_PLAYING, winamp.PLAYBACK_PAUSE):
            self.winamp.pause()
        else:
            raise ValueError("Unexpected Winamp status value %d" % status)
        self.poll()

    def ctrl_toggle_repeat(self):
        self.winamp.setRepeat(not self.winamp.getRepeat())
        self.poll()

    def ctrl_toggle_shuffle(self):
        self.winamp.setShuffle(not self.winamp.getShuffle())
        self.poll()

    def ctrl_toggle_fullscreen(self):
        self.winamp.toggleFullscreen()
        self.poll()

    def ctrl_next(self):
        self.winamp.next()
        self.poll()

    def ctrl_previous(self):
        self.winamp.previous()
        self.poll()

    def ctrl_seek(self, direction):
        self.winamp.seek(self.winamp.getPlayingTrackPosition() + 5000 * direction)
        self.poll()

    def ctrl_rate(self, rating):
        self.winamp.setRating(rating)
        self.poll()

    def ctrl_volume(self, direction):
        scale = 5 * 255 / 100
        new_volume = self.winamp.getVolume() + scale * direction
        # clamp to 0-255
        new_volume = min(max(new_volume, 0), 255)
        self.winamp.setVolume(new_volume)
        self.poll()

    def request_playlist(self, reply):
        titles = self.winamp.getPlaylistTitles()
        reply.ids = range(len(titles))
        reply.names = titles
        reply.item_actions = PLAYLIST_ACTIONS
        reply.send()

    def action_playlist_item(self, action_id, positions, ids):
        if action_id == IA_JUMP.id:
            ids = map(int, ids)

            self.winamp.setPlaylistPosition(ids[0])
            self.winamp.play()
            
            self.poll()
        elif action_id == IA_REMOVE.id:
            ids = map(int, ids)

            offset = 0
            for id in sorted(ids):
              self.winamp.removePlaylistPosition(id - offset)
              offset += 1
            
            self.poll()
        else:
            raise ValueError("Unknown action %r" % action_id)

    def action_files(self, action_id, files, uris):
        if action_id == FA_APPEND.id:
            self.winamp.enqueueFile(files[0])
        elif action_id == FA_PLAY.id:
            self.winamp.clearPlaylist()
            self.winamp.enqueueFile(files[0])
            self.winamp.setPlaylistPosition(0)
            self.winamp.play()
        else:
            raise ValueError("Unknown file action %r" % action_id)

# =============================================================================
# main (example startup using remuco.Manager)
# =============================================================================

if __name__ == '__main__':
    
    pa = WinampAdapter() # create the player adapter
    mg = remuco.Manager(pa)# # pass it to a manager
    mg.run() # run the manager (blocks until interrupt signal)
